{"addrs":[":8181"],"diagnostic-addrs":[],"level":"info","msg":"Initializing server.","time":"2025-10-06T19:37:13-07:00"}
{"level":"debug","msg":"maxprocs: Leaving GOMAXPROCS=4: CPU quota undefined","time":"2025-10-06T19:37:13-07:00"}
{"level":"info","msg":"Starting decision logger.","plugin":"decision_logs","time":"2025-10-06T19:37:13-07:00"}
{"level":"debug","msg":"Server initialized.","time":"2025-10-06T19:37:13-07:00"}
{"headers":{"Content-Type":["application/json"],"User-Agent":["Open Policy Agent/0.58.0 (linux, amd64)"]},"level":"debug","method":"POST","msg":"Sending request.","time":"2025-10-06T19:37:13-07:00","url":"https://telemetry.openpolicyagent.org/v1/version"}
{"headers":{"Content-Length":["191"],"Content-Type":["application/json"],"Date":["Tue, 07 Oct 2025 02:37:13 GMT"]},"level":"debug","method":"POST","msg":"Received response.","status":"200 OK","time":"2025-10-06T19:37:13-07:00","url":"https://telemetry.openpolicyagent.org/v1/version"}
{"current_version":"0.58.0","download_opa":"https://openpolicyagent.org/downloads/v1.9.0/opa_linux_amd64","latest_version":"1.9.0","level":"info","msg":"OPA is out of date.","release_notes":"https://github.com/open-policy-agent/opa/releases/tag/v1.9.0","time":"2025-10-06T19:37:13-07:00"}
{"client_addr":"127.0.0.1:58682","level":"info","msg":"Received request.","req_body":"{  \"input\": {    \"user\": \"ola\",    \"device\": {\"compliant\": true},    \"context\": {      \"risk\": 25,      \"geo_restricted\": false,      \"time_restricted\": false    }  }}","req_id":1,"req_method":"POST","req_params":{},"req_path":"/v1/data/telemetry/enforce/allow","time":"2025-10-06T19:37:16-07:00"}
{"decision_id":"e9aca583-d958-4857-a1b1-8b96ab7aa9bb","input":{"context":{"geo_restricted":false,"risk":25,"time_restricted":false},"device":{"compliant":true},"user":"ola"},"labels":{"id":"ed1727e6-6f1a-4c95-ac82-37566b08d575","version":"0.58.0"},"level":"info","metrics":{"counter_server_query_cache_hit":0,"timer_rego_input_parse_ns":169794,"timer_rego_query_compile_ns":2706485,"timer_rego_query_eval_ns":1640322,"timer_rego_query_parse_ns":130583,"timer_server_handler_ns":5882017},"msg":"Decision Log","path":"telemetry/enforce/allow","req_id":1,"requested_by":"127.0.0.1:58682","result":false,"time":"2025-10-06T19:37:16-07:00","timestamp":"2025-10-07T02:37:16.690525802Z","type":"openpolicyagent.org/decision_logs"}
{"client_addr":"127.0.0.1:58682","level":"info","msg":"Sent response.","req_id":1,"req_method":"POST","req_path":"/v1/data/telemetry/enforce/allow","resp_body":"{\"decision_id\":\"e9aca583-d958-4857-a1b1-8b96ab7aa9bb\",\"result\":false}\n","resp_bytes":70,"resp_duration":12.870936,"resp_status":200,"time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"127.0.0.1:58698","level":"info","msg":"Received request.","req_body":"{  \"input\": {    \"user\": \"operator\",    \"device\": {\"compliant\": false},    \"context\": {      \"risk\": 20,      \"geo_restricted\": false,      \"time_restricted\": false    }  }}","req_id":2,"req_method":"POST","req_params":{},"req_path":"/v1/data/telemetry/enforce/allow","time":"2025-10-06T19:37:16-07:00"}
{"decision_id":"08989dbe-e912-4391-80f4-2b6bf24d809e","input":{"context":{"geo_restricted":false,"risk":20,"time_restricted":false},"device":{"compliant":false},"user":"operator"},"labels":{"id":"ed1727e6-6f1a-4c95-ac82-37566b08d575","version":"0.58.0"},"level":"info","metrics":{"counter_server_query_cache_hit":1,"timer_rego_input_parse_ns":41540,"timer_rego_query_eval_ns":110787,"timer_server_handler_ns":201292},"msg":"Decision Log","path":"telemetry/enforce/allow","req_id":2,"requested_by":"127.0.0.1:58698","result":false,"time":"2025-10-06T19:37:16-07:00","timestamp":"2025-10-07T02:37:16.746166287Z","type":"openpolicyagent.org/decision_logs"}
{"client_addr":"127.0.0.1:58698","level":"info","msg":"Sent response.","req_id":2,"req_method":"POST","req_path":"/v1/data/telemetry/enforce/allow","resp_body":"{\"decision_id\":\"08989dbe-e912-4391-80f4-2b6bf24d809e\",\"result\":false}\n","resp_bytes":70,"resp_duration":1.411017,"resp_status":200,"time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"127.0.0.1:58714","level":"info","msg":"Received request.","req_body":"{  \"input\": {    \"user\": \"ola\",    \"device\": {\"compliant\": true},    \"context\": {      \"risk\": 30,      \"geo_restricted\": true,      \"country\": \"CN\",      \"time_restricted\": false    }  }}","req_id":3,"req_method":"POST","req_params":{},"req_path":"/v1/data/telemetry/enforce/allow","time":"2025-10-06T19:37:16-07:00"}
{"decision_id":"91a98fda-6a1b-49fc-9db5-9e7fe7c05cfe","input":{"context":{"country":"CN","geo_restricted":true,"risk":30,"time_restricted":false},"device":{"compliant":true},"user":"ola"},"labels":{"id":"ed1727e6-6f1a-4c95-ac82-37566b08d575","version":"0.58.0"},"level":"info","metrics":{"counter_server_query_cache_hit":1,"timer_rego_input_parse_ns":285506,"timer_rego_query_eval_ns":145383,"timer_server_handler_ns":606596},"msg":"Decision Log","path":"telemetry/enforce/allow","req_id":3,"requested_by":"127.0.0.1:58714","result":false,"time":"2025-10-06T19:37:16-07:00","timestamp":"2025-10-07T02:37:16.797920421Z","type":"openpolicyagent.org/decision_logs"}
{"client_addr":"127.0.0.1:58714","level":"info","msg":"Sent response.","req_id":3,"req_method":"POST","req_path":"/v1/data/telemetry/enforce/allow","resp_body":"{\"decision_id\":\"91a98fda-6a1b-49fc-9db5-9e7fe7c05cfe\",\"result\":false}\n","resp_bytes":70,"resp_duration":2.529218,"resp_status":200,"time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"127.0.0.1:58726","level":"info","msg":"Received request.","req_body":"{  \"input\": {    \"user\": \"admin\",    \"device\": {\"compliant\": true},    \"context\": {      \"risk\": 75,      \"geo_restricted\": false,      \"time_restricted\": false    }  }}","req_id":4,"req_method":"POST","req_params":{},"req_path":"/v1/data/telemetry/enforce/allow","time":"2025-10-06T19:37:16-07:00"}
{"decision_id":"8b91cde8-3030-4519-8ebc-d2eaaa5678c9","input":{"context":{"geo_restricted":false,"risk":75,"time_restricted":false},"device":{"compliant":true},"user":"admin"},"labels":{"id":"ed1727e6-6f1a-4c95-ac82-37566b08d575","version":"0.58.0"},"level":"info","metrics":{"counter_server_query_cache_hit":1,"timer_rego_input_parse_ns":45751,"timer_rego_query_eval_ns":126185,"timer_server_handler_ns":235124},"msg":"Decision Log","path":"telemetry/enforce/allow","req_id":4,"requested_by":"127.0.0.1:58726","result":false,"time":"2025-10-06T19:37:16-07:00","timestamp":"2025-10-07T02:37:16.857108893Z","type":"openpolicyagent.org/decision_logs"}
{"client_addr":"127.0.0.1:58726","level":"info","msg":"Sent response.","req_id":4,"req_method":"POST","req_path":"/v1/data/telemetry/enforce/allow","resp_body":"{\"decision_id\":\"8b91cde8-3030-4519-8ebc-d2eaaa5678c9\",\"result\":false}\n","resp_bytes":70,"resp_duration":1.270812,"resp_status":200,"time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"[::1]:51982","level":"info","msg":"Received request.","req_body":"","req_id":5,"req_method":"GET","req_params":{},"req_path":"/metrics","time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"[::1]:51982","level":"info","msg":"Sent response.","req_id":5,"req_method":"GET","req_path":"/metrics","resp_body":"# HELP go_cgo_go_to_c_calls_calls_total Count of calls made from Go to C by the current process.\n# TYPE go_cgo_go_to_c_calls_calls_total counter\ngo_cgo_go_to_c_calls_calls_total 0\n# HELP go_cpu_classes_gc_mark_assist_cpu_seconds_total Estimated total CPU time goroutines spent performing GC tasks to assist the GC and prevent it from falling behind the application. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_assist_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_assist_cpu_seconds_total 0.000739023\n# HELP go_cpu_classes_gc_mark_dedicated_cpu_seconds_total Estimated total CPU time spent performing GC tasks on processors (as defined by GOMAXPROCS) dedicated to those tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_dedicated_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_dedicated_cpu_seconds_total 0.016530413\n# HELP go_cpu_classes_gc_mark_idle_cpu_seconds_total Estimated total CPU time spent performing GC tasks on spare CPU resources that the Go scheduler could not otherwise find a use for. This should be subtracted from the total GC CPU time to obtain a measure of compulsory GC CPU time. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_idle_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_idle_cpu_seconds_total 0.011914155\n# HELP go_cpu_classes_gc_pause_cpu_seconds_total Estimated total CPU time spent with the application paused by the GC. Even if only one thread is running during the pause, this is computed as GOMAXPROCS times the pause latency because nothing else can be executing. This is the exact sum of samples in /gc/pause:seconds if each sample is multiplied by GOMAXPROCS at the time it is taken. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_pause_cpu_seconds_total counter\ngo_cpu_classes_gc_pause_cpu_seconds_total 0.033806528\n# HELP go_cpu_classes_gc_total_cpu_seconds_total Estimated total CPU time spent performing GC tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/gc.\n# TYPE go_cpu_classes_gc_total_cpu_seconds_total counter\ngo_cpu_classes_gc_total_cpu_seconds_total 0.062990119\n# HELP go_cpu_classes_idle_cpu_seconds_total Estimated total available CPU time not spent executing any Go or Go runtime code. In other words, the part of /cpu/classes/total:cpu-seconds that was unused. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_idle_cpu_seconds_total counter\ngo_cpu_classes_idle_cpu_seconds_total 12.34936716\n# HELP go_cpu_classes_scavenge_assist_cpu_seconds_total Estimated total CPU time spent returning unused memory to the underlying platform in response eagerly in response to memory pressure. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_scavenge_assist_cpu_seconds_total counter\ngo_cpu_classes_scavenge_assist_cpu_seconds_total 2.21e-07\n# HELP go_cpu_classes_scavenge_background_cpu_seconds_total Estimated total CPU time spent performing background tasks to return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_scavenge_background_cpu_seconds_total counter\ngo_cpu_classes_scavenge_background_cpu_seconds_total 0.003600403\n# HELP go_cpu_classes_scavenge_total_cpu_seconds_total Estimated total CPU time spent performing tasks that return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/scavenge.\n# TYPE go_cpu_classes_scavenge_total_cpu_seconds_total counter\ngo_cpu_classes_scavenge_total_cpu_seconds_total 0.003600624\n# HELP go_cpu_classes_total_cpu_seconds_total Estimated total available CPU time for user Go code or the Go runtime, as defined by GOMAXPROCS. In other words, GOMAXPROCS integrated over the wall-clock duration this process has been executing for. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes.\n# TYPE go_cpu_classes_total_cpu_seconds_total counter\ngo_cpu_classes_total_cpu_seconds_total 12.752951788\n# HELP go_cpu_classes_user_cpu_seconds_total Estimated total CPU time spent running user Go code. This may also include some small amount of time spent in the Go runtime. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_user_cpu_seconds_total counter\ngo_cpu_classes_user_cpu_seconds_total 0.336993885\n# HELP go_gc_cycles_automatic_gc_cycles_total Count of completed GC cycles generated by the Go runtime.\n# TYPE go_gc_cycles_automatic_gc_cycles_total counter\ngo_gc_cycles_automatic_gc_cycles_total 5\n# HELP go_gc_cycles_forced_gc_cycles_total Count of completed GC cycles forced by the application.\n# TYPE go_gc_cycles_forced_gc_cycles_total counter\ngo_gc_cycles_forced_gc_cycles_total 0\n# HELP go_gc_cycles_total_gc_cycles_total Count of all completed GC cycles.\n# TYPE go_gc_cycles_total_gc_cycles_total counter\ngo_gc_cycles_total_gc_cycles_total 5\n# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0.000660635\ngo_gc_duration_seconds{quantile=\"0.25\"} 0.000759277\ngo_gc_duration_seconds{quantile=\"0.5\"} 0.001603515\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.002087893\ngo_gc_duration_seconds{quantile=\"1\"} 0.003340312\ngo_gc_duration_seconds_sum 0.008451632\ngo_gc_duration_seconds_count 5\n# HELP go_gc_gogc_percent Heap size target percentage configured by the user, otherwise 100. This value is set by the GOGC environment variable, and the runtime/debug.SetGCPercent function.\n# TYPE go_gc_gogc_percent gauge\ngo_gc_gogc_percent 100\n# HELP go_gc_gomemlimit_bytes Go runtime memory limit configured by the user, otherwise math.MaxInt64. This value is set by the GOMEMLIMIT environment variable, and the runtime/debug.SetMemoryLimit function.\n# TYPE go_gc_gomemlimit_bytes gauge\ngo_gc_gomemlimit_bytes 9.223372036854776e+18\n# HELP go_gc_heap_allocs_by_size_bytes Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_allocs_by_size_bytes histogram\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"8.999999999999998\"} 2699\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"24.999999999999996\"} 38284\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"64.99999999999999\"} 70582\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"144.99999999999997\"} 85340\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"320.99999999999994\"} 89504\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"704.9999999999999\"} 90493\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"1536.9999999999998\"} 91638\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"3200.9999999999995\"} 91855\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"6528.999999999999\"} 91950\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"13568.999999999998\"} 91986\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"27264.999999999996\"} 91999\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"+Inf\"} 92023\ngo_gc_heap_allocs_by_size_bytes_sum 9.62472e+06\ngo_gc_heap_allocs_by_size_bytes_count 92023\n# HELP go_gc_heap_allocs_bytes_total Cumulative sum of memory allocated to the heap by the application.\n# TYPE go_gc_heap_allocs_bytes_total counter\ngo_gc_heap_allocs_bytes_total 9.62472e+06\n# HELP go_gc_heap_allocs_objects_total Cumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_allocs_objects_total counter\ngo_gc_heap_allocs_objects_total 92023\n# HELP go_gc_heap_frees_by_size_bytes Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_frees_by_size_bytes histogram\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"8.999999999999998\"} 2255\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"24.999999999999996\"} 32036\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"64.99999999999999\"} 58289\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"144.99999999999997\"} 71408\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"320.99999999999994\"} 74667\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"704.9999999999999\"} 75330\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"1536.9999999999998\"} 76198\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"3200.9999999999995\"} 76343\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"6528.999999999999\"} 76391\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"13568.999999999998\"} 76404\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"27264.999999999996\"} 76409\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"+Inf\"} 76427\ngo_gc_heap_frees_by_size_bytes_sum 7.365032e+06\ngo_gc_heap_frees_by_size_bytes_count 76427\n# HELP go_gc_heap_frees_bytes_total Cumulative sum of heap memory freed by the garbage collector.\n# TYPE go_gc_heap_frees_bytes_total counter\ngo_gc_heap_frees_bytes_total 7.365032e+06\n# HELP go_gc_heap_frees_objects_total Cumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_frees_objects_total counter\ngo_gc_heap_frees_objects_total 76427\n# HELP go_gc_heap_goal_bytes Heap size target for the end of the GC cycle.\n# TYPE go_gc_heap_goal_bytes gauge\ngo_gc_heap_goal_bytes 4.877296e+06\n# HELP go_gc_heap_live_bytes Heap memory occupied by live objects that were marked by the previous GC.\n# TYPE go_gc_heap_live_bytes gauge\ngo_gc_heap_live_bytes 2.22664e+06\n# HELP go_gc_heap_objects_objects Number of objects, live or unswept, occupying heap memory.\n# TYPE go_gc_heap_objects_objects gauge\ngo_gc_heap_objects_objects 15596\n# HELP go_gc_heap_tiny_allocs_objects_total Count of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.\n# TYPE go_gc_heap_tiny_allocs_objects_total counter\ngo_gc_heap_tiny_allocs_objects_total 3654\n# HELP go_gc_limiter_last_enabled_gc_cycle GC cycle the last time the GC CPU limiter was enabled. This metric is useful for diagnosing the root cause of an out-of-memory error, because the limiter trades memory for CPU time when the GC's CPU time gets too high. This is most likely to occur with use of SetMemoryLimit. The first GC cycle is cycle 1, so a value of 0 indicates that it was never enabled.\n# TYPE go_gc_limiter_last_enabled_gc_cycle gauge\ngo_gc_limiter_last_enabled_gc_cycle 0\n# HELP go_gc_pauses_seconds Distribution of individual GC-related stop-the-world pause latencies. Bucket counts increase monotonically.\n# TYPE go_gc_pauses_seconds histogram\ngo_gc_pauses_seconds_bucket{le=\"6.399999999999999e-08\"} 0\ngo_gc_pauses_seconds_bucket{le=\"6.399999999999999e-07\"} 0\ngo_gc_pauses_seconds_bucket{le=\"7.167999999999999e-06\"} 0\ngo_gc_pauses_seconds_bucket{le=\"8.191999999999999e-05\"} 3\ngo_gc_pauses_seconds_bucket{le=\"0.0009175039999999999\"} 7\ngo_gc_pauses_seconds_bucket{le=\"0.010485759999999998\"} 10\ngo_gc_pauses_seconds_bucket{le=\"0.11744051199999998\"} 10\ngo_gc_pauses_seconds_bucket{le=\"+Inf\"} 10\ngo_gc_pauses_seconds_sum 0.003101696\ngo_gc_pauses_seconds_count 10\n# HELP go_gc_scan_globals_bytes The total amount of global variable space that is scannable.\n# TYPE go_gc_scan_globals_bytes gauge\ngo_gc_scan_globals_bytes 405928\n# HELP go_gc_scan_heap_bytes The total amount of heap space that is scannable.\n# TYPE go_gc_scan_heap_bytes gauge\ngo_gc_scan_heap_bytes 1.573056e+06\n# HELP go_gc_scan_stack_bytes The number of bytes of stack that were scanned last GC cycle.\n# TYPE go_gc_scan_stack_bytes gauge\ngo_gc_scan_stack_bytes 18088\n# HELP go_gc_scan_total_bytes The total amount space that is scannable. Sum of all metrics in /gc/scan.\n# TYPE go_gc_scan_total_bytes gauge\ngo_gc_scan_total_bytes 1.997072e+06\n# HELP go_gc_stack_starting_size_bytes The stack size of new goroutines.\n# TYPE go_gc_stack_starting_size_bytes gauge\ngo_gc_stack_starting_size_bytes 2048\n# HELP go_godebug_non_default_behavior_execerrdot_events_total The number of non-default behaviors executed by the os/exec package due to a non-default GODEBUG=execerrdot=... setting.\n# TYPE go_godebug_non_default_behavior_execerrdot_events_total counter\ngo_godebug_non_default_behavior_execerrdot_events_total 0\n# HELP go_godebug_non_default_behavior_gocachehash_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocachehash=... setting.\n# TYPE go_godebug_non_default_behavior_gocachehash_events_total counter\ngo_godebug_non_default_behavior_gocachehash_events_total 0\n# HELP go_godebug_non_default_behavior_gocachetest_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocachetest=... setting.\n# TYPE go_godebug_non_default_behavior_gocachetest_events_total counter\ngo_godebug_non_default_behavior_gocachetest_events_total 0\n# HELP go_godebug_non_default_behavior_gocacheverify_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocacheverify=... setting.\n# TYPE go_godebug_non_default_behavior_gocacheverify_events_total counter\ngo_godebug_non_default_behavior_gocacheverify_events_total 0\n# HELP go_godebug_non_default_behavior_http2client_events_total The number of non-default behaviors executed by the net/http package due to a non-default GODEBUG=http2client=... setting.\n# TYPE go_godebug_non_default_behavior_http2client_events_total counter\ngo_godebug_non_default_behavior_http2client_events_total 0\n# HELP go_godebug_non_default_behavior_http2server_events_total The number of non-default behaviors executed by the net/http package due to a non-default GODEBUG=http2server=... setting.\n# TYPE go_godebug_non_default_behavior_http2server_events_total counter\ngo_godebug_non_default_behavior_http2server_events_total 0\n# HELP go_godebug_non_default_behavior_installgoroot_events_total The number of non-default behaviors executed by the go/build package due to a non-default GODEBUG=installgoroot=... setting.\n# TYPE go_godebug_non_default_behavior_installgoroot_events_total counter\ngo_godebug_non_default_behavior_installgoroot_events_total 0\n# HELP go_godebug_non_default_behavior_jstmpllitinterp_events_total The number of non-default behaviors executed by the html/template package due to a non-default GODEBUG=jstmpllitinterp=... setting.\n# TYPE go_godebug_non_default_behavior_jstmpllitinterp_events_total counter\ngo_godebug_non_default_behavior_jstmpllitinterp_events_total 0\n# HELP go_godebug_non_default_behavior_multipartmaxheaders_events_total The number of non-default behaviors executed by the mime/multipart package due to a non-default GODEBUG=multipartmaxheaders=... setting.\n# TYPE go_godebug_non_default_behavior_multipartmaxheaders_events_total counter\ngo_godebug_non_default_behavior_multipartmaxheaders_events_total 0\n# HELP go_godebug_non_default_behavior_multipartmaxparts_events_total The number of non-default behaviors executed by the mime/multipart package due to a non-default GODEBUG=multipartmaxparts=... setting.\n# TYPE go_godebug_non_default_behavior_multipartmaxparts_events_total counter\ngo_godebug_non_default_behavior_multipartmaxparts_events_total 0\n# HELP go_godebug_non_default_behavior_multipathtcp_events_total The number of non-default behaviors executed by the net package due to a non-default GODEBUG=multipathtcp=... setting.\n# TYPE go_godebug_non_default_behavior_multipathtcp_events_total counter\ngo_godebug_non_default_behavior_multipathtcp_events_total 0\n# HELP go_godebug_non_default_behavior_panicnil_events_total The number of non-default behaviors executed by the runtime package due to a non-default GODEBUG=panicnil=... setting.\n# TYPE go_godebug_non_default_behavior_panicnil_events_total counter\ngo_godebug_non_default_behavior_panicnil_events_total 0\n# HELP go_godebug_non_default_behavior_randautoseed_events_total The number of non-default behaviors executed by the math/rand package due to a non-default GODEBUG=randautoseed=... setting.\n# TYPE go_godebug_non_default_behavior_randautoseed_events_total counter\ngo_godebug_non_default_behavior_randautoseed_events_total 0\n# HELP go_godebug_non_default_behavior_tarinsecurepath_events_total The number of non-default behaviors executed by the archive/tar package due to a non-default GODEBUG=tarinsecurepath=... setting.\n# TYPE go_godebug_non_default_behavior_tarinsecurepath_events_total counter\ngo_godebug_non_default_behavior_tarinsecurepath_events_total 0\n# HELP go_godebug_non_default_behavior_tlsmaxrsasize_events_total The number of non-default behaviors executed by the crypto/tls package due to a non-default GODEBUG=tlsmaxrsasize=... setting.\n# TYPE go_godebug_non_default_behavior_tlsmaxrsasize_events_total counter\ngo_godebug_non_default_behavior_tlsmaxrsasize_events_total 0\n# HELP go_godebug_non_default_behavior_x509sha1_events_total The number of non-default behaviors executed by the crypto/x509 package due to a non-default GODEBUG=x509sha1=... setting.\n# TYPE go_godebug_non_default_behavior_x509sha1_events_total counter\ngo_godebug_non_default_behavior_x509sha1_events_total 0\n# HELP go_godebug_non_default_behavior_x509usefallbackroots_events_total The number of non-default behaviors executed by the crypto/x509 package due to a non-default GODEBUG=x509usefallbackroots=... setting.\n# TYPE go_godebug_non_default_behavior_x509usefallbackroots_events_total counter\ngo_godebug_non_default_behavior_x509usefallbackroots_events_total 0\n# HELP go_godebug_non_default_behavior_zipinsecurepath_events_total The number of non-default behaviors executed by the archive/zip package due to a non-default GODEBUG=zipinsecurepath=... setting.\n# TYPE go_godebug_non_default_behavior_zipinsecurepath_events_total counter\ngo_godebug_non_default_behavior_zipinsecurepath_events_total 0\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\ngo_goroutines 11\n# HELP go_info Information about the Go environment.\n# TYPE go_info gauge\ngo_info{version=\"go1.21.3\"} 1\n# HELP go_memory_classes_heap_free_bytes Memory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime's estimate of free address space that is backed by physical memory.\n# TYPE go_memory_classes_heap_free_bytes gauge\ngo_memory_classes_heap_free_bytes 1.032192e+06\n# HELP go_memory_classes_heap_objects_bytes Memory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.\n# TYPE go_memory_classes_heap_objects_bytes gauge\ngo_memory_classes_heap_objects_bytes 2.259688e+06\n# HELP go_memory_classes_heap_released_bytes Memory that is completely free and has been returned to the underlying system. This metric is the runtime's estimate of free address space that is still mapped into the process, but is not backed by physical memory.\n# TYPE go_memory_classes_heap_released_bytes gauge\ngo_memory_classes_heap_released_bytes 2.154496e+06\n# HELP go_memory_classes_heap_stacks_bytes Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use. Currently, this represents all stack memory for goroutines. It also includes all OS thread stacks in non-cgo programs. Note that stacks may be allocated differently in the future, and this may change.\n# TYPE go_memory_classes_heap_stacks_bytes gauge\ngo_memory_classes_heap_stacks_bytes 720896\n# HELP go_memory_classes_heap_unused_bytes Memory that is reserved for heap objects but is not currently used to hold heap objects.\n# TYPE go_memory_classes_heap_unused_bytes gauge\ngo_memory_classes_heap_unused_bytes 2.221336e+06\n# HELP go_memory_classes_metadata_mcache_free_bytes Memory that is reserved for runtime mcache structures, but not in-use.\n# TYPE go_memory_classes_metadata_mcache_free_bytes gauge\ngo_memory_classes_metadata_mcache_free_bytes 10800\n# HELP go_memory_classes_metadata_mcache_inuse_bytes Memory that is occupied by runtime mcache structures that are currently being used.\n# TYPE go_memory_classes_metadata_mcache_inuse_bytes gauge\ngo_memory_classes_metadata_mcache_inuse_bytes 4800\n# HELP go_memory_classes_metadata_mspan_free_bytes Memory that is reserved for runtime mspan structures, but not in-use.\n# TYPE go_memory_classes_metadata_mspan_free_bytes gauge\ngo_memory_classes_metadata_mspan_free_bytes 13776\n# HELP go_memory_classes_metadata_mspan_inuse_bytes Memory that is occupied by runtime mspan structures that are currently being used.\n# TYPE go_memory_classes_metadata_mspan_inuse_bytes gauge\ngo_memory_classes_metadata_mspan_inuse_bytes 116592\n# HELP go_memory_classes_metadata_other_bytes Memory that is reserved for or used to hold runtime metadata.\n# TYPE go_memory_classes_metadata_other_bytes gauge\ngo_memory_classes_metadata_other_bytes 4.401264e+06\n# HELP go_memory_classes_os_stacks_bytes Stack memory allocated by the underlying operating system. In non-cgo programs this metric is currently zero. This may change in the future.In cgo programs this metric includes OS thread stacks allocated directly from the OS. Currently, this only accounts for one stack in c-shared and c-archive build modes, and other sources of stacks from the OS are not measured. This too may change in the future.\n# TYPE go_memory_classes_os_stacks_bytes gauge\ngo_memory_classes_os_stacks_bytes 0\n# HELP go_memory_classes_other_bytes Memory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.\n# TYPE go_memory_classes_other_bytes gauge\ngo_memory_classes_other_bytes 921886\n# HELP go_memory_classes_profiling_buckets_bytes Memory that is used by the stack trace hash map used for profiling.\n# TYPE go_memory_classes_profiling_buckets_bytes gauge\ngo_memory_classes_profiling_buckets_bytes 1.450314e+06\n# HELP go_memory_classes_total_bytes All memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.\n# TYPE go_memory_classes_total_bytes gauge\ngo_memory_classes_total_bytes 1.530804e+07\n# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.\n# TYPE go_memstats_alloc_bytes gauge\ngo_memstats_alloc_bytes 2.259688e+06\n# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.\n# TYPE go_memstats_alloc_bytes_total counter\ngo_memstats_alloc_bytes_total 9.62472e+06\n# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.\n# TYPE go_memstats_buck_hash_sys_bytes gauge\ngo_memstats_buck_hash_sys_bytes 1.450314e+06\n# HELP go_memstats_frees_total Total number of frees.\n# TYPE go_memstats_frees_total counter\ngo_memstats_frees_total 80081\n# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.\n# TYPE go_memstats_gc_sys_bytes gauge\ngo_memstats_gc_sys_bytes 4.401264e+06\n# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.\n# TYPE go_memstats_heap_alloc_bytes gauge\ngo_memstats_heap_alloc_bytes 2.259688e+06\n# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.\n# TYPE go_memstats_heap_idle_bytes gauge\ngo_memstats_heap_idle_bytes 3.186688e+06\n# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.\n# TYPE go_memstats_heap_inuse_bytes gauge\ngo_memstats_heap_inuse_bytes 4.481024e+06\n# HELP go_memstats_heap_objects Number of allocated objects.\n# TYPE go_memstats_heap_objects gauge\ngo_memstats_heap_objects 15596\n# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.\n# TYPE go_memstats_heap_released_bytes gauge\ngo_memstats_heap_released_bytes 2.154496e+06\n# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.\n# TYPE go_memstats_heap_sys_bytes gauge\ngo_memstats_heap_sys_bytes 7.667712e+06\n# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.\n# TYPE go_memstats_last_gc_time_seconds gauge\ngo_memstats_last_gc_time_seconds 1.7598046368060596e+09\n# HELP go_memstats_lookups_total Total number of pointer lookups.\n# TYPE go_memstats_lookups_total counter\ngo_memstats_lookups_total 0\n# HELP go_memstats_mallocs_total Total number of mallocs.\n# TYPE go_memstats_mallocs_total counter\ngo_memstats_mallocs_total 95677\n# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.\n# TYPE go_memstats_mcache_inuse_bytes gauge\ngo_memstats_mcache_inuse_bytes 4800\n# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.\n# TYPE go_memstats_mcache_sys_bytes gauge\ngo_memstats_mcache_sys_bytes 15600\n# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.\n# TYPE go_memstats_mspan_inuse_bytes gauge\ngo_memstats_mspan_inuse_bytes 116592\n# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.\n# TYPE go_memstats_mspan_sys_bytes gauge\ngo_memstats_mspan_sys_bytes 130368\n# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.\n# TYPE go_memstats_next_gc_bytes gauge\ngo_memstats_next_gc_bytes 4.877296e+06\n# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.\n# TYPE go_memstats_other_sys_bytes gauge\ngo_memstats_other_sys_bytes 921886\n# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.\n# TYPE go_memstats_stack_inuse_bytes gauge\ngo_memstats_stack_inuse_bytes 720896\n# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.\n# TYPE go_memstats_stack_sys_bytes gauge\ngo_memstats_stack_sys_bytes 720896\n# HELP go_memstats_sys_bytes Number of bytes obtained from system.\n# TYPE go_memstats_sys_bytes gauge\ngo_memstats_sys_bytes 1.530804e+07\n# HELP go_sched_gomaxprocs_threads The current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously.\n# TYPE go_sched_gomaxprocs_threads gauge\ngo_sched_gomaxprocs_threads 4\n# HELP go_sched_goroutines_goroutines Count of live goroutines.\n# TYPE go_sched_goroutines_goroutines gauge\ngo_sched_goroutines_goroutines 11\n# HELP go_sched_latencies_seconds Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.\n# TYPE go_sched_latencies_seconds histogram\ngo_sched_latencies_seconds_bucket{le=\"6.399999999999999e-08\"} 248\ngo_sched_latencies_seconds_bucket{le=\"6.399999999999999e-07\"} 265\ngo_sched_latencies_seconds_bucket{le=\"7.167999999999999e-06\"} 274\ngo_sched_latencies_seconds_bucket{le=\"8.191999999999999e-05\"} 277\ngo_sched_latencies_seconds_bucket{le=\"0.0009175039999999999\"} 284\ngo_sched_latencies_seconds_bucket{le=\"0.010485759999999998\"} 288\ngo_sched_latencies_seconds_bucket{le=\"0.11744051199999998\"} 288\ngo_sched_latencies_seconds_bucket{le=\"+Inf\"} 288\ngo_sched_latencies_seconds_sum 0.004271808\ngo_sched_latencies_seconds_count 288\n# HELP go_sync_mutex_wait_total_seconds_total Approximate cumulative time goroutines have spent blocked on a sync.Mutex or sync.RWMutex. This metric is useful for identifying global changes in lock contention. Collect a mutex or block profile using the runtime/pprof package for more detailed contention data.\n# TYPE go_sync_mutex_wait_total_seconds_total counter\ngo_sync_mutex_wait_total_seconds_total 0.007072528\n# HELP go_threads Number of OS threads created.\n# TYPE go_threads gauge\ngo_threads 9\n# HELP http_request_duration_seconds A histogram of duration for requests.\n# TYPE http_request_duration_seconds histogram\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1e-06\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"5e-06\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1e-05\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"5e-05\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.0001\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.0005\"} 2\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.001\"} 2\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.01\"} 3\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.1\"} 4\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1\"} 4\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"+Inf\"} 4\nhttp_request_duration_seconds_sum{code=\"200\",handler=\"v1/data\",method=\"post\"} 0.014194621000000001\nhttp_request_duration_seconds_count{code=\"200\",handler=\"v1/data\",method=\"post\"} 4\n","resp_bytes":30112,"resp_duration":3.734001,"resp_status":200,"time":"2025-10-06T19:37:16-07:00"}
{"client_addr":"[::1]:52518","level":"info","msg":"Received request.","req_body":"","req_id":6,"req_method":"GET","req_params":{},"req_path":"/metrics","time":"2025-10-06T19:38:30-07:00"}
{"client_addr":"[::1]:52518","level":"info","msg":"Sent response.","req_id":6,"req_method":"GET","req_path":"/metrics","resp_body":"# HELP go_cgo_go_to_c_calls_calls_total Count of calls made from Go to C by the current process.\n# TYPE go_cgo_go_to_c_calls_calls_total counter\ngo_cgo_go_to_c_calls_calls_total 0\n# HELP go_cpu_classes_gc_mark_assist_cpu_seconds_total Estimated total CPU time goroutines spent performing GC tasks to assist the GC and prevent it from falling behind the application. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_assist_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_assist_cpu_seconds_total 0.000739023\n# HELP go_cpu_classes_gc_mark_dedicated_cpu_seconds_total Estimated total CPU time spent performing GC tasks on processors (as defined by GOMAXPROCS) dedicated to those tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_dedicated_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_dedicated_cpu_seconds_total 0.016530413\n# HELP go_cpu_classes_gc_mark_idle_cpu_seconds_total Estimated total CPU time spent performing GC tasks on spare CPU resources that the Go scheduler could not otherwise find a use for. This should be subtracted from the total GC CPU time to obtain a measure of compulsory GC CPU time. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_mark_idle_cpu_seconds_total counter\ngo_cpu_classes_gc_mark_idle_cpu_seconds_total 0.011914155\n# HELP go_cpu_classes_gc_pause_cpu_seconds_total Estimated total CPU time spent with the application paused by the GC. Even if only one thread is running during the pause, this is computed as GOMAXPROCS times the pause latency because nothing else can be executing. This is the exact sum of samples in /gc/pause:seconds if each sample is multiplied by GOMAXPROCS at the time it is taken. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_gc_pause_cpu_seconds_total counter\ngo_cpu_classes_gc_pause_cpu_seconds_total 0.033806528\n# HELP go_cpu_classes_gc_total_cpu_seconds_total Estimated total CPU time spent performing GC tasks. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/gc.\n# TYPE go_cpu_classes_gc_total_cpu_seconds_total counter\ngo_cpu_classes_gc_total_cpu_seconds_total 0.062990119\n# HELP go_cpu_classes_idle_cpu_seconds_total Estimated total available CPU time not spent executing any Go or Go runtime code. In other words, the part of /cpu/classes/total:cpu-seconds that was unused. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_idle_cpu_seconds_total counter\ngo_cpu_classes_idle_cpu_seconds_total 12.34936716\n# HELP go_cpu_classes_scavenge_assist_cpu_seconds_total Estimated total CPU time spent returning unused memory to the underlying platform in response eagerly in response to memory pressure. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_scavenge_assist_cpu_seconds_total counter\ngo_cpu_classes_scavenge_assist_cpu_seconds_total 2.21e-07\n# HELP go_cpu_classes_scavenge_background_cpu_seconds_total Estimated total CPU time spent performing background tasks to return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_scavenge_background_cpu_seconds_total counter\ngo_cpu_classes_scavenge_background_cpu_seconds_total 0.003600403\n# HELP go_cpu_classes_scavenge_total_cpu_seconds_total Estimated total CPU time spent performing tasks that return unused memory to the underlying platform. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes/scavenge.\n# TYPE go_cpu_classes_scavenge_total_cpu_seconds_total counter\ngo_cpu_classes_scavenge_total_cpu_seconds_total 0.003600624\n# HELP go_cpu_classes_total_cpu_seconds_total Estimated total available CPU time for user Go code or the Go runtime, as defined by GOMAXPROCS. In other words, GOMAXPROCS integrated over the wall-clock duration this process has been executing for. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics. Sum of all metrics in /cpu/classes.\n# TYPE go_cpu_classes_total_cpu_seconds_total counter\ngo_cpu_classes_total_cpu_seconds_total 12.752951788\n# HELP go_cpu_classes_user_cpu_seconds_total Estimated total CPU time spent running user Go code. This may also include some small amount of time spent in the Go runtime. This metric is an overestimate, and not directly comparable to system CPU time measurements. Compare only with other /cpu/classes metrics.\n# TYPE go_cpu_classes_user_cpu_seconds_total counter\ngo_cpu_classes_user_cpu_seconds_total 0.336993885\n# HELP go_gc_cycles_automatic_gc_cycles_total Count of completed GC cycles generated by the Go runtime.\n# TYPE go_gc_cycles_automatic_gc_cycles_total counter\ngo_gc_cycles_automatic_gc_cycles_total 5\n# HELP go_gc_cycles_forced_gc_cycles_total Count of completed GC cycles forced by the application.\n# TYPE go_gc_cycles_forced_gc_cycles_total counter\ngo_gc_cycles_forced_gc_cycles_total 0\n# HELP go_gc_cycles_total_gc_cycles_total Count of all completed GC cycles.\n# TYPE go_gc_cycles_total_gc_cycles_total counter\ngo_gc_cycles_total_gc_cycles_total 5\n# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0.000660635\ngo_gc_duration_seconds{quantile=\"0.25\"} 0.000759277\ngo_gc_duration_seconds{quantile=\"0.5\"} 0.001603515\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.002087893\ngo_gc_duration_seconds{quantile=\"1\"} 0.003340312\ngo_gc_duration_seconds_sum 0.008451632\ngo_gc_duration_seconds_count 5\n# HELP go_gc_gogc_percent Heap size target percentage configured by the user, otherwise 100. This value is set by the GOGC environment variable, and the runtime/debug.SetGCPercent function.\n# TYPE go_gc_gogc_percent gauge\ngo_gc_gogc_percent 100\n# HELP go_gc_gomemlimit_bytes Go runtime memory limit configured by the user, otherwise math.MaxInt64. This value is set by the GOMEMLIMIT environment variable, and the runtime/debug.SetMemoryLimit function.\n# TYPE go_gc_gomemlimit_bytes gauge\ngo_gc_gomemlimit_bytes 9.223372036854776e+18\n# HELP go_gc_heap_allocs_by_size_bytes Distribution of heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_allocs_by_size_bytes histogram\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"8.999999999999998\"} 2699\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"24.999999999999996\"} 38756\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"64.99999999999999\"} 71236\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"144.99999999999997\"} 86120\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"320.99999999999994\"} 90284\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"704.9999999999999\"} 91275\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"1536.9999999999998\"} 92421\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"3200.9999999999995\"} 92639\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"6528.999999999999\"} 92736\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"13568.999999999998\"} 92773\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"27264.999999999996\"} 92788\ngo_gc_heap_allocs_by_size_bytes_bucket{le=\"+Inf\"} 92816\ngo_gc_heap_allocs_by_size_bytes_sum 9.866528e+06\ngo_gc_heap_allocs_by_size_bytes_count 92816\n# HELP go_gc_heap_allocs_bytes_total Cumulative sum of memory allocated to the heap by the application.\n# TYPE go_gc_heap_allocs_bytes_total counter\ngo_gc_heap_allocs_bytes_total 9.866528e+06\n# HELP go_gc_heap_allocs_objects_total Cumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_allocs_objects_total counter\ngo_gc_heap_allocs_objects_total 92816\n# HELP go_gc_heap_frees_by_size_bytes Distribution of freed heap allocations by approximate size. Bucket counts increase monotonically. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_frees_by_size_bytes histogram\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"8.999999999999998\"} 2255\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"24.999999999999996\"} 32036\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"64.99999999999999\"} 58289\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"144.99999999999997\"} 71408\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"320.99999999999994\"} 74667\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"704.9999999999999\"} 75330\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"1536.9999999999998\"} 76198\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"3200.9999999999995\"} 76343\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"6528.999999999999\"} 76391\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"13568.999999999998\"} 76404\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"27264.999999999996\"} 76409\ngo_gc_heap_frees_by_size_bytes_bucket{le=\"+Inf\"} 76427\ngo_gc_heap_frees_by_size_bytes_sum 7.365032e+06\ngo_gc_heap_frees_by_size_bytes_count 76427\n# HELP go_gc_heap_frees_bytes_total Cumulative sum of heap memory freed by the garbage collector.\n# TYPE go_gc_heap_frees_bytes_total counter\ngo_gc_heap_frees_bytes_total 7.365032e+06\n# HELP go_gc_heap_frees_objects_total Cumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.\n# TYPE go_gc_heap_frees_objects_total counter\ngo_gc_heap_frees_objects_total 76427\n# HELP go_gc_heap_goal_bytes Heap size target for the end of the GC cycle.\n# TYPE go_gc_heap_goal_bytes gauge\ngo_gc_heap_goal_bytes 4.877296e+06\n# HELP go_gc_heap_live_bytes Heap memory occupied by live objects that were marked by the previous GC.\n# TYPE go_gc_heap_live_bytes gauge\ngo_gc_heap_live_bytes 2.22664e+06\n# HELP go_gc_heap_objects_objects Number of objects, live or unswept, occupying heap memory.\n# TYPE go_gc_heap_objects_objects gauge\ngo_gc_heap_objects_objects 16389\n# HELP go_gc_heap_tiny_allocs_objects_total Count of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.\n# TYPE go_gc_heap_tiny_allocs_objects_total counter\ngo_gc_heap_tiny_allocs_objects_total 3826\n# HELP go_gc_limiter_last_enabled_gc_cycle GC cycle the last time the GC CPU limiter was enabled. This metric is useful for diagnosing the root cause of an out-of-memory error, because the limiter trades memory for CPU time when the GC's CPU time gets too high. This is most likely to occur with use of SetMemoryLimit. The first GC cycle is cycle 1, so a value of 0 indicates that it was never enabled.\n# TYPE go_gc_limiter_last_enabled_gc_cycle gauge\ngo_gc_limiter_last_enabled_gc_cycle 0\n# HELP go_gc_pauses_seconds Distribution of individual GC-related stop-the-world pause latencies. Bucket counts increase monotonically.\n# TYPE go_gc_pauses_seconds histogram\ngo_gc_pauses_seconds_bucket{le=\"6.399999999999999e-08\"} 0\ngo_gc_pauses_seconds_bucket{le=\"6.399999999999999e-07\"} 0\ngo_gc_pauses_seconds_bucket{le=\"7.167999999999999e-06\"} 0\ngo_gc_pauses_seconds_bucket{le=\"8.191999999999999e-05\"} 3\ngo_gc_pauses_seconds_bucket{le=\"0.0009175039999999999\"} 7\ngo_gc_pauses_seconds_bucket{le=\"0.010485759999999998\"} 10\ngo_gc_pauses_seconds_bucket{le=\"0.11744051199999998\"} 10\ngo_gc_pauses_seconds_bucket{le=\"+Inf\"} 10\ngo_gc_pauses_seconds_sum 0.003101696\ngo_gc_pauses_seconds_count 10\n# HELP go_gc_scan_globals_bytes The total amount of global variable space that is scannable.\n# TYPE go_gc_scan_globals_bytes gauge\ngo_gc_scan_globals_bytes 405928\n# HELP go_gc_scan_heap_bytes The total amount of heap space that is scannable.\n# TYPE go_gc_scan_heap_bytes gauge\ngo_gc_scan_heap_bytes 1.66488e+06\n# HELP go_gc_scan_stack_bytes The number of bytes of stack that were scanned last GC cycle.\n# TYPE go_gc_scan_stack_bytes gauge\ngo_gc_scan_stack_bytes 18088\n# HELP go_gc_scan_total_bytes The total amount space that is scannable. Sum of all metrics in /gc/scan.\n# TYPE go_gc_scan_total_bytes gauge\ngo_gc_scan_total_bytes 2.088896e+06\n# HELP go_gc_stack_starting_size_bytes The stack size of new goroutines.\n# TYPE go_gc_stack_starting_size_bytes gauge\ngo_gc_stack_starting_size_bytes 2048\n# HELP go_godebug_non_default_behavior_execerrdot_events_total The number of non-default behaviors executed by the os/exec package due to a non-default GODEBUG=execerrdot=... setting.\n# TYPE go_godebug_non_default_behavior_execerrdot_events_total counter\ngo_godebug_non_default_behavior_execerrdot_events_total 0\n# HELP go_godebug_non_default_behavior_gocachehash_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocachehash=... setting.\n# TYPE go_godebug_non_default_behavior_gocachehash_events_total counter\ngo_godebug_non_default_behavior_gocachehash_events_total 0\n# HELP go_godebug_non_default_behavior_gocachetest_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocachetest=... setting.\n# TYPE go_godebug_non_default_behavior_gocachetest_events_total counter\ngo_godebug_non_default_behavior_gocachetest_events_total 0\n# HELP go_godebug_non_default_behavior_gocacheverify_events_total The number of non-default behaviors executed by the cmd/go package due to a non-default GODEBUG=gocacheverify=... setting.\n# TYPE go_godebug_non_default_behavior_gocacheverify_events_total counter\ngo_godebug_non_default_behavior_gocacheverify_events_total 0\n# HELP go_godebug_non_default_behavior_http2client_events_total The number of non-default behaviors executed by the net/http package due to a non-default GODEBUG=http2client=... setting.\n# TYPE go_godebug_non_default_behavior_http2client_events_total counter\ngo_godebug_non_default_behavior_http2client_events_total 0\n# HELP go_godebug_non_default_behavior_http2server_events_total The number of non-default behaviors executed by the net/http package due to a non-default GODEBUG=http2server=... setting.\n# TYPE go_godebug_non_default_behavior_http2server_events_total counter\ngo_godebug_non_default_behavior_http2server_events_total 0\n# HELP go_godebug_non_default_behavior_installgoroot_events_total The number of non-default behaviors executed by the go/build package due to a non-default GODEBUG=installgoroot=... setting.\n# TYPE go_godebug_non_default_behavior_installgoroot_events_total counter\ngo_godebug_non_default_behavior_installgoroot_events_total 0\n# HELP go_godebug_non_default_behavior_jstmpllitinterp_events_total The number of non-default behaviors executed by the html/template package due to a non-default GODEBUG=jstmpllitinterp=... setting.\n# TYPE go_godebug_non_default_behavior_jstmpllitinterp_events_total counter\ngo_godebug_non_default_behavior_jstmpllitinterp_events_total 0\n# HELP go_godebug_non_default_behavior_multipartmaxheaders_events_total The number of non-default behaviors executed by the mime/multipart package due to a non-default GODEBUG=multipartmaxheaders=... setting.\n# TYPE go_godebug_non_default_behavior_multipartmaxheaders_events_total counter\ngo_godebug_non_default_behavior_multipartmaxheaders_events_total 0\n# HELP go_godebug_non_default_behavior_multipartmaxparts_events_total The number of non-default behaviors executed by the mime/multipart package due to a non-default GODEBUG=multipartmaxparts=... setting.\n# TYPE go_godebug_non_default_behavior_multipartmaxparts_events_total counter\ngo_godebug_non_default_behavior_multipartmaxparts_events_total 0\n# HELP go_godebug_non_default_behavior_multipathtcp_events_total The number of non-default behaviors executed by the net package due to a non-default GODEBUG=multipathtcp=... setting.\n# TYPE go_godebug_non_default_behavior_multipathtcp_events_total counter\ngo_godebug_non_default_behavior_multipathtcp_events_total 0\n# HELP go_godebug_non_default_behavior_panicnil_events_total The number of non-default behaviors executed by the runtime package due to a non-default GODEBUG=panicnil=... setting.\n# TYPE go_godebug_non_default_behavior_panicnil_events_total counter\ngo_godebug_non_default_behavior_panicnil_events_total 0\n# HELP go_godebug_non_default_behavior_randautoseed_events_total The number of non-default behaviors executed by the math/rand package due to a non-default GODEBUG=randautoseed=... setting.\n# TYPE go_godebug_non_default_behavior_randautoseed_events_total counter\ngo_godebug_non_default_behavior_randautoseed_events_total 0\n# HELP go_godebug_non_default_behavior_tarinsecurepath_events_total The number of non-default behaviors executed by the archive/tar package due to a non-default GODEBUG=tarinsecurepath=... setting.\n# TYPE go_godebug_non_default_behavior_tarinsecurepath_events_total counter\ngo_godebug_non_default_behavior_tarinsecurepath_events_total 0\n# HELP go_godebug_non_default_behavior_tlsmaxrsasize_events_total The number of non-default behaviors executed by the crypto/tls package due to a non-default GODEBUG=tlsmaxrsasize=... setting.\n# TYPE go_godebug_non_default_behavior_tlsmaxrsasize_events_total counter\ngo_godebug_non_default_behavior_tlsmaxrsasize_events_total 0\n# HELP go_godebug_non_default_behavior_x509sha1_events_total The number of non-default behaviors executed by the crypto/x509 package due to a non-default GODEBUG=x509sha1=... setting.\n# TYPE go_godebug_non_default_behavior_x509sha1_events_total counter\ngo_godebug_non_default_behavior_x509sha1_events_total 0\n# HELP go_godebug_non_default_behavior_x509usefallbackroots_events_total The number of non-default behaviors executed by the crypto/x509 package due to a non-default GODEBUG=x509usefallbackroots=... setting.\n# TYPE go_godebug_non_default_behavior_x509usefallbackroots_events_total counter\ngo_godebug_non_default_behavior_x509usefallbackroots_events_total 0\n# HELP go_godebug_non_default_behavior_zipinsecurepath_events_total The number of non-default behaviors executed by the archive/zip package due to a non-default GODEBUG=zipinsecurepath=... setting.\n# TYPE go_godebug_non_default_behavior_zipinsecurepath_events_total counter\ngo_godebug_non_default_behavior_zipinsecurepath_events_total 0\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\ngo_goroutines 10\n# HELP go_info Information about the Go environment.\n# TYPE go_info gauge\ngo_info{version=\"go1.21.3\"} 1\n# HELP go_memory_classes_heap_free_bytes Memory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime's estimate of free address space that is backed by physical memory.\n# TYPE go_memory_classes_heap_free_bytes gauge\ngo_memory_classes_heap_free_bytes 573440\n# HELP go_memory_classes_heap_objects_bytes Memory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.\n# TYPE go_memory_classes_heap_objects_bytes gauge\ngo_memory_classes_heap_objects_bytes 2.501496e+06\n# HELP go_memory_classes_heap_released_bytes Memory that is completely free and has been returned to the underlying system. This metric is the runtime's estimate of free address space that is still mapped into the process, but is not backed by physical memory.\n# TYPE go_memory_classes_heap_released_bytes gauge\ngo_memory_classes_heap_released_bytes 2.08896e+06\n# HELP go_memory_classes_heap_stacks_bytes Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use. Currently, this represents all stack memory for goroutines. It also includes all OS thread stacks in non-cgo programs. Note that stacks may be allocated differently in the future, and this may change.\n# TYPE go_memory_classes_heap_stacks_bytes gauge\ngo_memory_classes_heap_stacks_bytes 720896\n# HELP go_memory_classes_heap_unused_bytes Memory that is reserved for heap objects but is not currently used to hold heap objects.\n# TYPE go_memory_classes_heap_unused_bytes gauge\ngo_memory_classes_heap_unused_bytes 2.503816e+06\n# HELP go_memory_classes_metadata_mcache_free_bytes Memory that is reserved for runtime mcache structures, but not in-use.\n# TYPE go_memory_classes_metadata_mcache_free_bytes gauge\ngo_memory_classes_metadata_mcache_free_bytes 10800\n# HELP go_memory_classes_metadata_mcache_inuse_bytes Memory that is occupied by runtime mcache structures that are currently being used.\n# TYPE go_memory_classes_metadata_mcache_inuse_bytes gauge\ngo_memory_classes_metadata_mcache_inuse_bytes 4800\n# HELP go_memory_classes_metadata_mspan_free_bytes Memory that is reserved for runtime mspan structures, but not in-use.\n# TYPE go_memory_classes_metadata_mspan_free_bytes gauge\ngo_memory_classes_metadata_mspan_free_bytes 13776\n# HELP go_memory_classes_metadata_mspan_inuse_bytes Memory that is occupied by runtime mspan structures that are currently being used.\n# TYPE go_memory_classes_metadata_mspan_inuse_bytes gauge\ngo_memory_classes_metadata_mspan_inuse_bytes 116592\n# HELP go_memory_classes_metadata_other_bytes Memory that is reserved for or used to hold runtime metadata.\n# TYPE go_memory_classes_metadata_other_bytes gauge\ngo_memory_classes_metadata_other_bytes 4.40536e+06\n# HELP go_memory_classes_os_stacks_bytes Stack memory allocated by the underlying operating system. In non-cgo programs this metric is currently zero. This may change in the future.In cgo programs this metric includes OS thread stacks allocated directly from the OS. Currently, this only accounts for one stack in c-shared and c-archive build modes, and other sources of stacks from the OS are not measured. This too may change in the future.\n# TYPE go_memory_classes_os_stacks_bytes gauge\ngo_memory_classes_os_stacks_bytes 0\n# HELP go_memory_classes_other_bytes Memory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.\n# TYPE go_memory_classes_other_bytes gauge\ngo_memory_classes_other_bytes 917462\n# HELP go_memory_classes_profiling_buckets_bytes Memory that is used by the stack trace hash map used for profiling.\n# TYPE go_memory_classes_profiling_buckets_bytes gauge\ngo_memory_classes_profiling_buckets_bytes 1.450642e+06\n# HELP go_memory_classes_total_bytes All memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.\n# TYPE go_memory_classes_total_bytes gauge\ngo_memory_classes_total_bytes 1.530804e+07\n# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.\n# TYPE go_memstats_alloc_bytes gauge\ngo_memstats_alloc_bytes 2.501496e+06\n# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.\n# TYPE go_memstats_alloc_bytes_total counter\ngo_memstats_alloc_bytes_total 9.866528e+06\n# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.\n# TYPE go_memstats_buck_hash_sys_bytes gauge\ngo_memstats_buck_hash_sys_bytes 1.450642e+06\n# HELP go_memstats_frees_total Total number of frees.\n# TYPE go_memstats_frees_total counter\ngo_memstats_frees_total 80253\n# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.\n# TYPE go_memstats_gc_sys_bytes gauge\ngo_memstats_gc_sys_bytes 4.40536e+06\n# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.\n# TYPE go_memstats_heap_alloc_bytes gauge\ngo_memstats_heap_alloc_bytes 2.501496e+06\n# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.\n# TYPE go_memstats_heap_idle_bytes gauge\ngo_memstats_heap_idle_bytes 2.6624e+06\n# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.\n# TYPE go_memstats_heap_inuse_bytes gauge\ngo_memstats_heap_inuse_bytes 5.005312e+06\n# HELP go_memstats_heap_objects Number of allocated objects.\n# TYPE go_memstats_heap_objects gauge\ngo_memstats_heap_objects 16389\n# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.\n# TYPE go_memstats_heap_released_bytes gauge\ngo_memstats_heap_released_bytes 2.08896e+06\n# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.\n# TYPE go_memstats_heap_sys_bytes gauge\ngo_memstats_heap_sys_bytes 7.667712e+06\n# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.\n# TYPE go_memstats_last_gc_time_seconds gauge\ngo_memstats_last_gc_time_seconds 1.7598046368060596e+09\n# HELP go_memstats_lookups_total Total number of pointer lookups.\n# TYPE go_memstats_lookups_total counter\ngo_memstats_lookups_total 0\n# HELP go_memstats_mallocs_total Total number of mallocs.\n# TYPE go_memstats_mallocs_total counter\ngo_memstats_mallocs_total 96642\n# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.\n# TYPE go_memstats_mcache_inuse_bytes gauge\ngo_memstats_mcache_inuse_bytes 4800\n# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.\n# TYPE go_memstats_mcache_sys_bytes gauge\ngo_memstats_mcache_sys_bytes 15600\n# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.\n# TYPE go_memstats_mspan_inuse_bytes gauge\ngo_memstats_mspan_inuse_bytes 116592\n# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.\n# TYPE go_memstats_mspan_sys_bytes gauge\ngo_memstats_mspan_sys_bytes 130368\n# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.\n# TYPE go_memstats_next_gc_bytes gauge\ngo_memstats_next_gc_bytes 4.877296e+06\n# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.\n# TYPE go_memstats_other_sys_bytes gauge\ngo_memstats_other_sys_bytes 917462\n# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.\n# TYPE go_memstats_stack_inuse_bytes gauge\ngo_memstats_stack_inuse_bytes 720896\n# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.\n# TYPE go_memstats_stack_sys_bytes gauge\ngo_memstats_stack_sys_bytes 720896\n# HELP go_memstats_sys_bytes Number of bytes obtained from system.\n# TYPE go_memstats_sys_bytes gauge\ngo_memstats_sys_bytes 1.530804e+07\n# HELP go_sched_gomaxprocs_threads The current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously.\n# TYPE go_sched_gomaxprocs_threads gauge\ngo_sched_gomaxprocs_threads 4\n# HELP go_sched_goroutines_goroutines Count of live goroutines.\n# TYPE go_sched_goroutines_goroutines gauge\ngo_sched_goroutines_goroutines 10\n# HELP go_sched_latencies_seconds Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running. Bucket counts increase monotonically.\n# TYPE go_sched_latencies_seconds histogram\ngo_sched_latencies_seconds_bucket{le=\"6.399999999999999e-08\"} 252\ngo_sched_latencies_seconds_bucket{le=\"6.399999999999999e-07\"} 269\ngo_sched_latencies_seconds_bucket{le=\"7.167999999999999e-06\"} 278\ngo_sched_latencies_seconds_bucket{le=\"8.191999999999999e-05\"} 281\ngo_sched_latencies_seconds_bucket{le=\"0.0009175039999999999\"} 290\ngo_sched_latencies_seconds_bucket{le=\"0.010485759999999998\"} 294\ngo_sched_latencies_seconds_bucket{le=\"0.11744051199999998\"} 294\ngo_sched_latencies_seconds_bucket{le=\"+Inf\"} 294\ngo_sched_latencies_seconds_sum 0.004435648\ngo_sched_latencies_seconds_count 294\n# HELP go_sync_mutex_wait_total_seconds_total Approximate cumulative time goroutines have spent blocked on a sync.Mutex or sync.RWMutex. This metric is useful for identifying global changes in lock contention. Collect a mutex or block profile using the runtime/pprof package for more detailed contention data.\n# TYPE go_sync_mutex_wait_total_seconds_total counter\ngo_sync_mutex_wait_total_seconds_total 0.007072528\n# HELP go_threads Number of OS threads created.\n# TYPE go_threads gauge\ngo_threads 9\n# HELP http_request_duration_seconds A histogram of duration for requests.\n# TYPE http_request_duration_seconds histogram\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1e-06\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"5e-06\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1e-05\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"5e-05\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.0001\"} 0\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.0005\"} 2\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.001\"} 2\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.01\"} 3\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"0.1\"} 4\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"1\"} 4\nhttp_request_duration_seconds_bucket{code=\"200\",handler=\"v1/data\",method=\"post\",le=\"+Inf\"} 4\nhttp_request_duration_seconds_sum{code=\"200\",handler=\"v1/data\",method=\"post\"} 0.014194621000000001\nhttp_request_duration_seconds_count{code=\"200\",handler=\"v1/data\",method=\"post\"} 4\n","resp_bytes":30102,"resp_duration":2.503544,"resp_status":200,"time":"2025-10-06T19:38:30-07:00"}
